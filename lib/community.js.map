{"version":3,"file":"community.js","sources":["../src/community.ts"],"sourcesContent":["import Arweave from 'arweave';\nimport axios from 'axios';\nimport { JWKInterface } from 'arweave/node/lib/wallet';\nimport { readContract, interactWriteDryRun, interactWrite, createContractFromTx, interactRead } from 'smartweave';\nimport redstone from 'redstone-api';\nimport {\n  BalancesInterface,\n  VaultInterface,\n  VoteInterface,\n  RoleInterface,\n  StateInterface,\n  InputInterface,\n  ResultInterface,\n  TagInterface,\n} from './faces';\nimport Utils from './utils';\n\nexport default class Community {\n  private readonly cacheServer: string = 'https://cache.community.xyz/';\n  private contractSrc: string = 'ngMml4jmlxu0umpiQCsHgPX2pb_Yz6YDB8f7G6j-tpI';\n  private readonly mainContract: string = 'mzvUgNc8YFk0w5K5H7c8pyT-FC5Y_ba0r7_8766Kx74';\n  private readonly txFeeUsd: number = 0.5;\n  private readonly createFeeUsd: number = 3;\n\n  private createFee: number = 0.83;\n  private txFee: number = 0.21;\n\n  private arweave: Arweave;\n  private wallet!: JWKInterface;\n  private walletAddress!: string;\n  private dummyWallet: JWKInterface;\n  private isWalletConnect: boolean = false;\n\n  // Community specific variables\n  private communityContract = '';\n  private state!: StateInterface;\n  private firstCall: boolean = true;\n  private cacheRefreshInterval: number = 1000 * 60 * 2; // 2 minutes\n  private stateCallInProgress: boolean = false;\n\n  private readonly warnAfter: number = 60 * 60 * 24 * 1000; // 24 hours\n  private updatedFees: boolean = false;\n\n  /**\n   * Before interacting with Community you need to have at least Arweave initialized.\n   * @param arweave - Arweave instance\n   * @param wallet - JWK wallet file data\n   * @param cacheRefreshInterval - Refresh interval in milliseconds for the cached state\n   */\n  constructor(arweave: Arweave, wallet?: JWKInterface, cacheRefreshInterval = 1000 * 60 * 2) {\n    this.arweave = arweave;\n\n    if (wallet) {\n      this.wallet = wallet;\n      arweave.wallets\n        .jwkToAddress(wallet)\n        .then((addy) => (this.walletAddress = addy))\n        .catch(console.log);\n    }\n\n    if (cacheRefreshInterval) {\n      this.cacheRefreshInterval = cacheRefreshInterval;\n    }\n\n    this.getFees();\n    this.events();\n  }\n\n  /**\n   * Get the Main Community contract ID\n   * @returns {Promise<string>} The main contract ID.\n   */\n  public async getMainContractId(): Promise<string> {\n    return this.mainContract;\n  }\n\n  /**\n   * Get the contract source txid used for new PSCs.\n   * @returns {Promise<string>} The contract source ID.\n   */\n  public async getContractSourceId(): Promise<string> {\n    return this.contractSrc;\n  }\n\n  /**\n   * Get the current Community contract ID\n   */\n  public async getCommunityContract(): Promise<string> {\n    return this.communityContract;\n  }\n\n  /**\n   * Get the current Community state.\n   * @param cached - Wether to return the cached version or reload\n   * @returns - The current state and sync afterwards if needed.\n   */\n  public async getState(cached = true): Promise<StateInterface> {\n    if (!this.communityContract.length) {\n      throw new Error('No community set. Use setCommunityTx to get your current state.');\n    }\n\n    if (this.firstCall) {\n      this.firstCall = false;\n      return this.update(true);\n    }\n\n    if (!cached || !this.state) {\n      return this.update(false);\n    }\n\n    return this.state;\n  }\n\n  /**\n   * Set the user wallet data.\n   * @param wallet - JWK wallet file data\n   * @returns The wallet address\n   */\n  public async setWallet(wallet: JWKInterface): Promise<string> {\n    this.wallet = wallet;\n    this.walletAddress = await this.arweave.wallets.jwkToAddress(this.wallet);\n\n    return this.walletAddress;\n  }\n\n  /**\n   * Set the states for a new Community using the Community contract.\n   * @param name - The Community name\n   * @param ticker - Currency ticker, ex: TICK\n   * @param balances - an object of wallet addresses and their token balances\n   * @param quorum - % of votes weight, for a proposal to be valid\n   * @param support = % of votes as \"yes\", for a vote to be valid\n   * @param voteLength - For how long (in blocks) should the vote be active\n   * @param lockMinLength - What is the minimum lock time (in blocks)\n   * @param lockMaxLength - What is the maximum lock time (in blocks)\n   * @param vault - Vault object, optional\n   * @param votes - Votes, optional\n   * @param roles - Roles, optional\n   * @param extraSettings - Any custom extra settings can be sent here. @since v1.1.0\n   *\n   * @returns - The created state\n   */\n  public async setState(\n    name: string,\n    ticker: string,\n    balances: BalancesInterface,\n    quorum: number = 50,\n    support: number = 50,\n    voteLength: number = 2000,\n    lockMinLength: number = 720,\n    lockMaxLength: number = 10000,\n    vault: VaultInterface = {},\n    votes: VoteInterface[] = [],\n    roles: RoleInterface = {},\n    extraSettings: [string, any][] = [],\n  ): Promise<StateInterface> {\n    // Make sure the wallet exists.\n    await this.checkWallet();\n\n    // Make sure data isn't null\n    if (!name) {\n      name = '';\n    }\n    if (!ticker) {\n      ticker = '';\n    }\n    if (!balances) {\n      balances = {};\n    }\n    if (!quorum) {\n      quorum = 0;\n    }\n    if (!support) {\n      support = 0;\n    }\n    if (!voteLength) {\n      voteLength = 0;\n    }\n    if (!lockMinLength) {\n      lockMinLength = 0;\n    }\n    if (!lockMaxLength) {\n      lockMaxLength = 0;\n    }\n    if (!vault) {\n      vault = {};\n    }\n    if (!votes) {\n      votes = [];\n    }\n    if (!roles) {\n      roles = {};\n    }\n    if (!extraSettings) {\n      extraSettings = [];\n    }\n\n    // Clean data\n    name = name.trim();\n    ticker = ticker.trim();\n    balances = Utils.trimObj(balances);\n    quorum = +quorum;\n    support = +support;\n    voteLength = +voteLength;\n    lockMinLength = +lockMinLength;\n    lockMaxLength = +lockMaxLength;\n    vault = Utils.trimObj(vault);\n    votes = Utils.trimObj(votes);\n    roles = Utils.trimObj(roles);\n\n    // Validations\n    if (name.length < 3) {\n      throw new Error('Community Name must be at least 3 characters.');\n    }\n    if (ticker.length < 3) {\n      throw new Error('Ticker must be at least 3 characters.');\n    }\n    if (!Object.keys(balances).length) {\n      throw new Error('At least one account need to be specified.');\n    }\n    for (const bal in balances) {\n      if (isNaN(balances[bal]) || !Number.isInteger(balances[bal]) || balances[bal] < 0) {\n        throw new Error('Address balances must be a positive integer.');\n      }\n    }\n    if (isNaN(quorum) || quorum < 1 || quorum > 99 || !Number.isInteger(quorum)) {\n      throw new Error('Quorum must be an integer between 1-99.');\n    }\n    quorum = quorum / 100;\n    if (isNaN(support) || support < 1 || support > 99 || !Number.isInteger(support)) {\n      throw new Error('Support must be an integer between 1-99.');\n    }\n    support = support / 100;\n    if (isNaN(voteLength) || !Number.isInteger(voteLength) || voteLength < 1) {\n      throw new Error('Vote Length must be a positive integer.');\n    }\n    if (isNaN(lockMinLength) || lockMinLength < 1 || !Number.isInteger(lockMinLength)) {\n      throw new Error('Lock Min Length must be a positive integer.');\n    }\n    if (isNaN(lockMaxLength) || lockMaxLength < lockMinLength || !Number.isInteger(lockMaxLength)) {\n      throw new Error('Lock Max Length must be a positive integer, greater than lockMinLength.');\n    }\n    if (Object.keys(vault).length) {\n      for (const key of Object.keys(vault)) {\n        for (const k in vault[key]) {\n          if (isNaN(vault[key][k].balance) || !Number.isInteger(vault[key][k].balance) || vault[key][k].balance < 0) {\n            throw new Error('Vault balance must be a positive integer.');\n          }\n        }\n      }\n    }\n\n    const settings: [string, any][] = [\n      ['quorum', quorum],\n      ['support', support],\n      ['voteLength', voteLength],\n      ['lockMinLength', lockMinLength],\n      ['lockMaxLength', lockMaxLength],\n    ];\n\n    for (let i = 0, j = extraSettings.length; i < j; i++) {\n      const s = extraSettings[i];\n      if (typeof s[0] === 'string' && typeof s[1] !== 'undefined') {\n        settings.push(s);\n      }\n    }\n\n    // Set the state\n    this.state = {\n      name,\n      ticker,\n      balances,\n      vault,\n      votes,\n      roles,\n      settings: new Map(settings),\n    };\n\n    return this.state;\n  }\n\n  /**\n   * Update the used contract source transaction ID.\n   * @param id New contract source ID.\n   * @returns boolean that validates if the update was done.\n   */\n  public async setContractSourceId(id: string): Promise<boolean> {\n    if (!Utils.isTxId(id)) {\n      return false;\n    }\n    this.contractSrc = id;\n    return true;\n  }\n\n  /**\n   * Create a new Community with the current, previously saved (with `setState`) state.\n   * @param tags - optional: tags to be added to this transaction\n   * @returns The created community transaction ID.\n   */\n  public async create(tags: TagInterface[] = []): Promise<string> {\n    // Create the new Community.\n    const { target, winstonQty } = await this.chargeFee(this.createFee);\n\n    const toSubmit: any = this.state;\n    toSubmit.settings = Array.from(this.state.settings);\n\n    tags = [\n      ...(await this.cleanTags(tags)),\n      ...[\n        { name: 'Action', value: 'CreateCommunity' },\n        { name: 'Message', value: `Created Community ${this.state.name}, ticker: ${this.state.ticker}.` },\n        { name: 'Service', value: 'CommunityXYZ' },\n      ],\n    ];\n\n    const communityID = await createContractFromTx(\n      this.arweave,\n      this.wallet,\n      this.contractSrc,\n      JSON.stringify(toSubmit),\n      tags,\n      target,\n      winstonQty,\n    );\n    this.communityContract = communityID;\n    return communityID;\n  }\n\n  /**\n   * Get the current create cost of a community.\n   * @param inAr - Return in winston or AR\n   * @param options - If return inAr is set to true, these options are used to format the returned AR value.\n   */\n  public async getCreateCost(\n    inAr = false,\n    options?: { formatted: boolean; decimals: number; trim: boolean },\n  ): Promise<string> {\n    if (!this.updatedFees) {\n      await new Promise((resolve) => setTimeout(() => resolve(true), 100));\n      return this.getCreateCost(inAr, options);\n    }\n\n    const res = this.arweave.ar.arToWinston(this.createFee.toString());\n    if (inAr) {\n      return this.arweave.ar.winstonToAr(res, options);\n    }\n\n    return res;\n  }\n\n  /**\n   * Get the current action (post interaction) cost of a community.\n   * @param inAr - Return in winston or AR\n   * @param options - If return inAr is set to true, these options are used to format the returned AR value.\n   */\n  public async getActionCost(\n    inAr = false,\n    options?: { formatted: boolean; decimals: number; trim: boolean },\n  ): Promise<string> {\n    if (!this.updatedFees) {\n      await new Promise((resolve) => setTimeout(() => resolve(true), 100));\n      return this.getActionCost(inAr, options);\n    }\n\n    const res = this.arweave.ar.arToWinston(this.txFee.toString());\n    if (inAr) {\n      return this.arweave.ar.winstonToAr(res, options);\n    }\n\n    return res;\n  }\n\n  /**\n   * Set the Community interactions to this transaction ID.\n   * @param txId Community's Transaction ID\n   * @returns boolean - True if successful, false if error.\n   */\n  public async setCommunityTx(txId: string): Promise<boolean> {\n    // reset state\n    this.state = null;\n    this.communityContract = txId;\n\n    try {\n      await this.getState(false);\n    } catch (e) {\n      this.state = null;\n      this.communityContract = null;\n      console.log(e);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Do a GET call to any function on the contract.\n   * @param params - InputInterface\n   * @returns ResultInterface\n   */\n  public async get(params: InputInterface = { function: 'balance' }): Promise<ResultInterface> {\n    if (!this.wallet && !this.dummyWallet) {\n      this.dummyWallet = await this.arweave.wallets.generate();\n    }\n\n    return interactRead(this.arweave, this.wallet || this.dummyWallet, this.communityContract, params);\n  }\n\n  /**\n   * Get the target or current wallet token balance\n   * @param target The target wallet address\n   * @returns Current target token balance\n   */\n  public async getBalance(target: string = this.walletAddress): Promise<number> {\n    const res = await this.get({ function: 'balance', target });\n    return res.balance;\n  }\n\n  /**\n   * Get the target or current wallet unlocked token balance\n   * @param target The target wallet address\n   * @returns Current target token balance\n   */\n  public async getUnlockedBalance(target: string = this.walletAddress): Promise<number> {\n    const res = await this.get({ function: 'unlockedBalance', target });\n    return res.balance;\n  }\n\n  /**\n   * Get the target or current wallet vault balance\n   * @param target The target wallet address\n   * @returns Current target token balance\n   */\n  public async getVaultBalance(target: string = this.walletAddress): Promise<number> {\n    const res = await this.get({ function: 'vaultBalance', target });\n    return res.balance;\n  }\n\n  /**\n   * Get the target or current wallet role\n   * @param target The target wallet address\n   * @returns Current target role\n   */\n  public async getRole(target: string = this.walletAddress): Promise<string> {\n    const res = await this.get({ function: 'role', target });\n    return res.role;\n  }\n\n  /**\n   * Select one of your community holders based on their weighted total balance.\n   * @param balances  - State balances, optional.\n   * @param vault - State vault, optional.\n   */\n  public async selectWeightedHolder(\n    balances: BalancesInterface = this.state.balances,\n    vault: VaultInterface = this.state.vault,\n  ) {\n    if (!this.state) {\n      throw new Error('Need to initilate the state and worker.');\n    }\n\n    let totalTokens = 0;\n    for (const addy of Object.keys(balances)) {\n      totalTokens += balances[addy];\n    }\n    for (const addy of Object.keys(vault)) {\n      if (!vault[addy].length) continue;\n      const vaultBalance = vault[addy].map((a) => a.balance).reduce((a, b) => a + b, 0);\n      totalTokens += vaultBalance;\n      if (addy in balances) {\n        balances[addy] += vaultBalance;\n      } else {\n        balances[addy] = vaultBalance;\n      }\n    }\n\n    const weighted: BalancesInterface = {};\n    for (const addy of Object.keys(balances)) {\n      weighted[addy] = balances[addy] / totalTokens;\n    }\n\n    let sum = 0;\n    const r = Math.random();\n    for (const addy of Object.keys(weighted)) {\n      sum += weighted[addy];\n      if (r <= sum && weighted[addy] > 0) {\n        return addy;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the current fee charged for actions on Community.\n   * @return {object} - The txFee and the createFee, both are numbers.\n   */\n  public async getFees(): Promise<{ txFee: number; createFee: number }> {\n    try {\n      const price = await redstone.getPrice('AR');\n\n      const createdAt = price.timestamp;\n      const arPrice = price.value;\n\n      if (createdAt && arPrice) {\n        const deployTime = new Date().getTime() - createdAt;\n        if (deployTime > this.warnAfter) {\n          console.warn(\"Price hasn't been updated over a day ago!\");\n        }\n\n        this.createFee = +(this.createFeeUsd / arPrice).toFixed(5);\n        this.txFee = +(this.txFeeUsd / arPrice).toFixed(5);\n      }\n    } catch (e) {\n      console.log(e);\n      console.warn('Was not able to update the fees, please try again later');\n    }\n\n    this.updatedFees = true;\n    return {\n      createFee: this.createFee,\n      txFee: this.txFee,\n    };\n  }\n\n  // Setters\n\n  /**\n   * Transfer token balances to another account.\n   * @param target - Target Wallet Address\n   * @param qty - Amount of the token to send\n   * @param tags - optional: tags to be added to this transaction\n   * @returns The transaction ID for this action\n   */\n  public async transfer(target: string, qty: number, tags: TagInterface[] = []): Promise<string> {\n    tags = [\n      ...(await this.cleanTags(tags)),\n      ...[\n        { name: 'Action', value: 'transfer' },\n        { name: 'Message', value: `Transfer to ${target} of ${Utils.formatNumber(qty)}.` },\n        { name: 'Community-ID', value: this.communityContract },\n        { name: 'Service', value: 'CommunityXYZ' },\n      ],\n    ];\n\n    return this.interact({ function: 'transfer', target, qty }, tags);\n  }\n\n  /**\n   * Transfer tokens to an account's vault.\n   * @param target - Target Wallet Address\n   * @param qty - Amount of the token to send\n   * @param lockLength - For how many blocks to lock the tokens\n   * @param tags - optional: tags to be added to this transaction\n   * @returns The transaction ID for this action\n   */\n  public async transferLocked(\n    target: string,\n    qty: number,\n    lockLength: number,\n    tags: TagInterface[] = [],\n  ): Promise<string> {\n    tags = [\n      ...(await this.cleanTags(tags)),\n      ...[\n        { name: 'Action', value: 'transferLocked' },\n        {\n          name: 'Message',\n          value: `Transfer locked to ${target} of ${Utils.formatNumber(qty)} for ${Utils.formatNumber(\n            lockLength,\n          )} blocks.`,\n        },\n        { name: 'Community-ID', value: this.communityContract },\n        { name: 'Service', value: 'CommunityXYZ' },\n      ],\n    ];\n\n    return this.interact({ function: 'transferLocked', target, qty, lockLength }, tags);\n  }\n\n  /**\n   * Lock your balances in a vault to earn voting weight.\n   * @param qty - Positive integer for the quantity to lock\n   * @param lockLength - Length of the lock, in blocks\n   * @param tags - optional: tags to be added to this transaction\n   * @returns The transaction ID for this action\n   */\n  public async lockBalance(qty: number, lockLength: number, tags: TagInterface[] = []): Promise<string> {\n    tags = [\n      ...(await this.cleanTags(tags)),\n      ...[\n        { name: 'Action', value: 'lock' },\n        {\n          name: 'Message',\n          value: `Locked ${Utils.formatNumber(qty)} for ${Utils.formatNumber(lockLength)} blocks (${Utils.formatBlocks(\n            lockLength,\n          )}).`,\n        },\n        { name: 'Community-ID', value: this.communityContract },\n        { name: 'Service', value: 'CommunityXYZ' },\n      ],\n    ];\n\n    return this.interact({ function: 'lock', qty, lockLength }, tags);\n  }\n\n  /**\n   * Unlock all your locked balances that are over the lock period.\n   * @param tags - optional: tags to be added to this transaction\n   * @returns The transaction ID for this action\n   */\n  public async unlockVault(tags: TagInterface[] = []): Promise<string> {\n    tags = [\n      ...(await this.cleanTags(tags)),\n      ...[\n        { name: 'Action', value: 'unlock' },\n        { name: 'Message', value: `Unlocked vaults.` },\n        { name: 'Community-ID', value: this.communityContract },\n        { name: 'Service', value: 'CommunityXYZ' },\n      ],\n    ];\n    return this.interact({ function: 'unlock' }, tags);\n  }\n\n  /**\n   * Increase the lock time (in blocks) of a vault.\n   * @param vaultId - The vault index position to increase\n   * @param lockLength - Length of the lock, in blocks\n   * @param tags - optional: tags to be added to this transaction\n   * @returns The transaction ID for this action\n   */\n  public async increaseVault(vaultId: number, lockLength: number, tags: TagInterface[] = []): Promise<string> {\n    tags = [\n      ...(await this.cleanTags(tags)),\n      ...[\n        { name: 'Action', value: 'increase' },\n        {\n          name: 'Message',\n          value: `Increased vault ID ${vaultId} for ${lockLength} blocks (${Utils.formatBlocks(lockLength)}).`,\n        },\n        { name: 'Community-ID', value: this.communityContract },\n        { name: 'Service', value: 'CommunityXYZ' },\n      ],\n    ];\n    return this.interact({ function: 'increaseVault', id: vaultId, lockLength }, tags);\n  }\n\n  /**\n   * Create a new vote\n   * @param params VoteInterface without the \"function\"\n   * @param tags - optional: tags to be added to this transaction\n   * @returns The transaction ID for this action\n   */\n  public async proposeVote(params: VoteInterface, tags: TagInterface[] = []): Promise<string> {\n    const pCopy: VoteInterface = JSON.parse(JSON.stringify(params));\n    console.log(pCopy);\n\n    if (pCopy.type === 'set') {\n      if (\n        pCopy.key === 'quorum' ||\n        pCopy.key === 'support' ||\n        pCopy.key === 'lockMinLength' ||\n        pCopy.key === 'lockMaxLength'\n      ) {\n        pCopy.value = +pCopy.value;\n      }\n\n      if (pCopy.key === 'quorum' || pCopy.key === 'support') {\n        if (pCopy.value > 0 && pCopy.value < 100) {\n          pCopy.value = pCopy.value / 100;\n        } else if (pCopy.value <= 0 || pCopy.value >= 100) {\n          throw new Error('Invalid value.');\n        }\n      }\n\n      if (\n        pCopy.key === 'lockMinLength' &&\n        (pCopy.value < 1 || pCopy.value > this.state.settings.get('lockMaxLength'))\n      ) {\n        throw new Error('Invalid minimum lock length.');\n      }\n      if (\n        pCopy.key === 'lockMaxLength' &&\n        (pCopy.value < 1 || pCopy.value < this.state.settings.get('lockMinLength'))\n      ) {\n        throw new Error('Invalid maximum lock length.');\n      }\n    }\n\n    const input: InputInterface = { ...pCopy, function: 'propose' };\n\n    tags = [\n      ...(await this.cleanTags(tags)),\n      ...[\n        { name: 'Action', value: 'propose' },\n        {\n          name: 'Message',\n          value: `Proposed ${pCopy.type === 'indicative' || pCopy.key === 'other' ? 'an' : 'a'} ${\n            pCopy.key || pCopy.type\n          } vote, value: ${pCopy.value}.`,\n        },\n        { name: 'Community-ID', value: this.communityContract },\n        { name: 'Service', value: 'CommunityXYZ' },\n      ],\n    ];\n    return this.interact(input, tags);\n  }\n\n  /**\n   * Cast a vote on an existing, and active, vote proposal.\n   * @param id - The vote ID, this is the index of the vote in votes\n   * @param cast - Cast your vote with 'yay' (for yes) or 'nay' (for no)\n   * @param tags - optional: tags to be added to this transaction\n   * @returns The transaction ID for this action\n   */\n  public async vote(id: number, cast: 'yay' | 'nay', tags: TagInterface[] = []): Promise<string> {\n    tags = [\n      ...(await this.cleanTags(tags)),\n      ...[\n        { name: 'Action', value: 'vote' },\n        { name: 'Message', value: `Voted on vote ID ${id}: ${cast}.` },\n        { name: 'Community-ID', value: this.communityContract },\n        { name: 'Service', value: 'CommunityXYZ' },\n      ],\n    ];\n    return this.interact({ function: 'vote', id, cast }, tags);\n  }\n\n  /**\n   * Finalize a vote, to run the desired vote details if approved, or reject it and close.\n   * @param id - The vote ID, this is the index of the vote in votes\n   * @param tags - optional: tags to be added to this transaction\n   * @returns The transaction ID for this action\n   */\n  public async finalize(id: number, tags: TagInterface[] = []): Promise<string> {\n    tags = [\n      ...(await this.cleanTags(tags)),\n      ...[\n        { name: 'Action', value: 'finalize' },\n        { name: 'Message', value: `Finalize completed votes.` },\n        { name: 'Community-ID', value: this.communityContract },\n        { name: 'Service', value: 'CommunityXYZ' },\n      ],\n    ];\n    return this.interact({ function: 'finalize', id }, tags);\n  }\n\n  /**\n   * Charge a fee for each Community's interactions.\n   * @param fee - which fee to charge\n   */\n  private async chargeFee(fee: number = this.txFee): Promise<{ target: string; winstonQty: string }> {\n    const balance = await this.arweave.wallets.getBalance(this.walletAddress);\n\n    if (+balance < +fee) {\n      throw new Error('Not enough balance.');\n    }\n\n    let state: StateInterface;\n    try {\n      state = (await axios(`${this.cacheServer}contract/${this.mainContract}`)).data;\n    } catch (e) {\n      state = await readContract(this.arweave, this.mainContract);\n    }\n\n    const target = await this.selectWeightedHolder(state.balances, state.vault);\n    if (target === this.walletAddress) {\n      return {\n        target: '',\n        winstonQty: '0',\n      };\n    }\n\n    return {\n      target,\n      winstonQty: this.arweave.ar.arToWinston(fee.toString()),\n    };\n  }\n\n  /**\n   * Function used to check if the user is already logged in\n   */\n  private async checkWallet(): Promise<void> {\n    if (!this.wallet && !this.isWalletConnect) {\n      throw new Error(\n        'You first need to set the user wallet, you can do this while on new Community(..., wallet) or using setWallet(wallet).',\n      );\n    }\n  }\n\n  /**\n   * Stringify and remove tags that are defined by CommunityJS\n   * @returns An array of the TagInterface object `{name: string, value: string}`\n   */\n  private async cleanTags(tags: TagInterface[]): Promise<TagInterface[]> {\n    if (!tags || !tags.length) {\n      return [];\n    }\n\n    const blacklist: string[] = ['action', 'message', 'community-id', 'service', 'type'];\n    const res: TagInterface[] = [];\n\n    for (const tag of tags) {\n      if (!tag.name || !tag.value) continue;\n\n      if (!blacklist.includes(tag.name.toLowerCase())) {\n        res.push({\n          name: tag.name.toString(),\n          value: tag.value.toString(),\n        });\n      }\n    }\n\n    return res;\n  }\n\n  /**\n   * Updates the current state used for a Community instance\n   * @param recall Auto recall this function each cacheRefreshInterval ms\n   */\n  private async update(recall = false): Promise<StateInterface> {\n    if (!this.communityContract.length) {\n      setTimeout(() => this.update(), this.cacheRefreshInterval);\n      return;\n    }\n\n    if (this.stateCallInProgress) {\n      const getLastState = async (): Promise<StateInterface> => {\n        if (this.stateCallInProgress) {\n          return new Promise((resolve) => setTimeout(() => resolve(getLastState()), 1000));\n        }\n\n        return this.state;\n      };\n      return getLastState();\n    }\n\n    this.stateCallInProgress = true;\n\n    let state: StateInterface;\n    try {\n      state = (await axios(`${this.cacheServer}contract/${this.communityContract}`)).data;\n    } catch (e) {\n      state = await readContract(this.arweave, this.communityContract);\n    }\n\n    state.settings = new Map(state.settings);\n    this.state = state;\n\n    this.stateCallInProgress = false;\n\n    if (recall) {\n      setTimeout(() => this.update(true), this.cacheRefreshInterval);\n    }\n    return this.state;\n  }\n\n  /**\n   * The most important function, it writes to the contract.\n   * @param input - InputInterface\n   * @param tags - Array of tags as an object with name and value as strings\n   * @param fee - Transaction fee\n   */\n  private async interact(\n    input: InputInterface,\n    tags: { name: string; value: string }[],\n    fee: number = this.txFee,\n  ): Promise<string> {\n    const { target, winstonQty } = await this.chargeFee(fee);\n\n    tags.push({ name: 'Type', value: 'ArweaveActivity' });\n\n    const res = await interactWriteDryRun(\n      this.arweave,\n      this.wallet || 'use_wallet',\n      this.communityContract,\n      input,\n      tags,\n      target,\n      winstonQty,\n    );\n    if (res.type === 'error') {\n      //  || res.type === 'exception'\n      throw new Error(res.result);\n    }\n\n    return interactWrite(\n      this.arweave,\n      this.wallet || 'use_wallet',\n      this.communityContract,\n      input,\n      tags,\n      target,\n      winstonQty,\n    );\n  }\n\n  /**\n   * Create events to handle the wallet connect feature\n   */\n  private events() {\n    const win: any =\n      typeof window !== 'undefined'\n        ? window\n        : {\n            removeEventListener: (evName: string) => {},\n            addEventListener: (evName: string, callback: (e: any) => {}) => {},\n          };\n\n    async function walletConnect() {\n      this.walletAddress = await this.arweave.wallets.getAddress();\n      this.isWalletConnect = true;\n    }\n    async function walletSwitch(e: any) {\n      this.walletAddress = await e.detail.address;\n      this.isWalletConnect = true;\n    }\n\n    win.removeEventListener('arweaveWalletLoaded', () => walletConnect());\n    win.removeEventListener('walletSwitch', (e) => walletSwitch(e));\n    win.addEventListener('arweaveWalletLoaded', () => walletConnect());\n    win.addEventListener('walletSwitch', (e) => walletSwitch(e));\n  }\n}\n"],"names":[],"mappings":"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"}